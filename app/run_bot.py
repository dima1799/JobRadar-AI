import os, logging, asyncio
from typing import List
from sentence_transformers import SentenceTransformer
from qdrant_client import QdrantClient
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import httpx

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("jobradar-bot")

QDRANT_URL_BOT = os.getenv("QDRANT_URL_BOT")
QDRANT_COLLECTION = os.getenv("QDRANT_COLLECTION")
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
EMBED_MODEL = os.getenv("EMBED_MODEL")
MODEL_DIR = os.getenv("MODEL_DIR") 

model = SentenceTransformer(MODEL_DIR if MODEL_DIR else EMBED_MODEL)

qdrant = QdrantClient(url=QDRANT_URL_BOT)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'ML engineer, NLP, —É–¥–∞–ª—ë–Ω–∫–∞'), "
        "—è –ø–æ–¥–±–µ—Ä—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
    )

def retrieve(query: str, k: int = 5):
    vec = model.encode([query])[0].tolist()
    hits = qdrant.search(collection_name=QDRANT_COLLECTION, query_vector=vec, limit=k)
    items = []
    for h in hits:
        p = h.payload or {}
        items.append({
            "score": h.score,
            "title": p.get("title", "-"),
            "company": p.get("company", "-"),
            "experience": p.get("experience", "-"),
            "description": p.get("description", "-")[:1200],
            "url": p.get("url", "-"),
        })
    return items

async def call_together(prompt: str, model_name: str = "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo", max_tokens: int = 600):
    if not TOGETHER_API_KEY:
        return "üõë TOGETHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω."
    url = "https://api.together.xyz/v1/chat/completions"
    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    body = {
        "model": model_name,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3,
        "max_tokens": max_tokens,
    }

    proxy_url = os.getenv("TOGETHER_PROXY")  
    proxies = {"all://": proxy_url} if proxy_url else None

    async with httpx.AsyncClient(proxies=proxies,timeout=60) as client:
        r = await client.post(url, headers=headers, json=body)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"]

def build_prompt(prefs: str, docs: List[dict]) -> str:
    ctx = "\n\n".join(
        f"- {d['title']} ‚Äî {d['company']} (–æ–ø—ã—Ç: {d['experience']})\n"
        f"  –û–ø–∏—Å–∞–Ω–∏–µ: {d['description']}\n"
        f"  URL: {d['url']}"
        for d in docs
    )
    return (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ —Å—Ç–µ–∫, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: 1) –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä; 2) —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–∑–∏—Å–∞–º–∏\n\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {prefs}\n\n"
        f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n{ctx}"
    )

async def on_message(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = (update.message.text or "").strip()
    if not query:
        return
    await update.message.reply_text("üîé –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏‚Ä¶")
    docs = retrieve(query, k=5)
    if not docs:
        await update.message.replyText("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return
    prompt = build_prompt(query, docs)
    answer = await call_together(prompt)
    # –¥–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    links = "\n".join(f"‚Ä¢ {d['title']} ‚Äî {d['url']}" for d in docs)
    out = f"{answer}\n\nüîó –°—Å—ã–ª–∫–∏:\n{links}"
    await update.message.reply_text(out[:3900], disable_web_page_preview=True)

def main():
    if not TG_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app = Application.builder().token(TG_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
